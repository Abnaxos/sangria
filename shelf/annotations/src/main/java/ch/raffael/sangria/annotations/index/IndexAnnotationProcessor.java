package ch.raffael.sangria.annotations.index;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Date;
import java.util.Set;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedAnnotationTypes;
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.QualifiedNameable;
import javax.lang.model.element.TypeElement;
import javax.tools.Diagnostic;
import javax.tools.FileObject;
import javax.tools.StandardLocation;


/**
 * @author <a href="mailto:herzog@raffael.ch">Raffael Herzog</a>
 */
@SupportedAnnotationTypes("*")
@SupportedSourceVersion(SourceVersion.RELEASE_8)
public class IndexAnnotationProcessor extends AbstractProcessor {

    public static final String INDEX_RESOURCE_PATH = "META-INF/ch.raffael.sangria.index";

    @Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
        if ( roundEnv.processingOver() ) {
            return false;
        }
        Index index = new Index();
        FileObject currentIndexResource;
        try {
            currentIndexResource = processingEnv.getFiler().getResource(StandardLocation.CLASS_OUTPUT, "", INDEX_RESOURCE_PATH);
            try ( InputStream input = new BufferedInputStream(currentIndexResource.openInputStream()) ) {
                index.load(input);
            }
            catch ( FileNotFoundException e ) {
                currentIndexResource = null;
            }
            catch ( IOException e ) {
                processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, "Error reading " + currentIndexResource.getName() + ": " + e.getLocalizedMessage());
                return false;
            }
        }
        catch ( IOException e ) {
            processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, "Error retrieving resource for existing (?) index file : " + e.getLocalizedMessage());
            return false;
        }
        for ( Element indexedAnnotation : annotations ) {
            if ( indexedAnnotation.getAnnotation(Indexed.class) == null ) {
                // not indexed -> skip
                continue;
            }
            for ( Element element : roundEnv.getElementsAnnotatedWith((TypeElement)indexedAnnotation) ) {
                Element indexable = indexableElement(element);
                if ( indexable.getAnnotation(ExcludeFromIndex.class) == null ) {
                    index.add(new Index.Entry(
                            indexable.getKind() == ElementKind.PACKAGE ? Index.Kind.PACKAGE : Index.Kind.CLASS,
                            ((QualifiedNameable)indexable).getQualifiedName().toString()));
                }
            }
        }
        try {
            if ( !index.isEmpty() ) {
                FileObject indexResource = processingEnv.getFiler().createResource(StandardLocation.CLASS_OUTPUT, "", INDEX_RESOURCE_PATH);
                try ( OutputStream output = new BufferedOutputStream(indexResource.openOutputStream()) ) {
                    index.write(String.format("Generated by %s on %s%n%n", getClass().getName(), new Date()), output);
                }
            }
            else if ( currentIndexResource != null ) {
                if ( !currentIndexResource.delete() ) {
                    processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, "Cannot delete existing index file " + currentIndexResource.getName());
                }
            }
        }
        catch ( IOException e ) {
            processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, "I/O error writing resource " + INDEX_RESOURCE_PATH + ": " + e.getLocalizedMessage());
        }
        return false;
    }

    private Element indexableElement(Element annotatedElement) {
        while ( !(annotatedElement.getKind().isClass() || annotatedElement.getKind().isInterface() || annotatedElement.getKind() == ElementKind.PACKAGE) ) {
            annotatedElement = annotatedElement.getEnclosingElement();
        }
        return annotatedElement;
    }

}
