/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Raffael Herzog
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

import sangria.PreparedShadow


buildscript {
    repositories {
        jcenter()
    }
}

apply plugin:'wrapper'

wrapper {
    gradleVersion = '2.2.1'
}

allprojects {
    apply plugin:'java'
    apply plugin:'groovy'
    apply plugin:'maven'
    apply plugin:'idea'

    version = '1.0-SNAPSHOT'
    group = 'ch.raffael.sangria'

    sourceCompatibility = 1.8
    buildDir = 'target'
    archivesBaseName = "sangria${project.path.replace(':', '-')}"

    configurations {
        provided
        optional
        [ provided, optional ].each { conf ->
            testCompile.extendsFrom conf
            sourceSets.main.compileClasspath += conf
            sourceSets.main.compileClasspath += conf
            idea.module.scopes.PROVIDED.plus += [conf]
        }
    }

    repositories {
        mavenLocal()
        jcenter()
    }

    // don't do that for now, we're discriminating the shadowed libs ;)
    // jar { into('META-INF') { from "${rootProject.file('LICENSE.txt')}" } }

    task sourceJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }

    task('develEnv')
}

subprojects {
    configurations {
        provided

        loggingApi
        loggingImpl {
            extendsFrom configurations.loggingApi
        }

        groovy
    }

    ext.slf4jVersion = '1.7.10'
    dependencies {
        provided group:'ch.raffael.guards', name:'guards-api', version:'0.1-SNAPSHOT'
        provided group:'com.google.code.findbugs', name:'jsr305', version:'3.0.0'
        testCompile project(':test-commons')

        groovy group:'org.codehaus.groovy', name:'groovy-all', classifier:'indy', version:'2.3.9'

        loggingApi group:'org.slf4j', name:'slf4j-api', version:slf4jVersion
        // loggingApi group:'commons-logging', name:'commons-logging-api', version:'1.0.4'

        loggingImpl group:'ch.qos.logback', name:'logback-classic', version:'1.1.2'
        loggingImpl group:'org.slf4j', name:'jul-to-slf4j', version:slf4jVersion
        // loggingImpl group:'org.slf4j', name:'jcl-over-slf4j', version:versions.slf4j
        // loggingImpl group:'org.slf4j', name:'log4j-over-slf4j', version:versions.slf4j

        configurations.compile.extendsFrom configurations.loggingApi
    }
}

allprojects {
    idea.module {
        inheritOutputDirs = false
        outputDir = compileJava.destinationDir
        testOutputDir = compileTestJava.destinationDir
        excludeDirs = [ file('.gradle') ]
        name = "$rootProject.name-${project.path.substring(1).replace(':', '-')}"
   }
}
idea.module.name = project.name

// additions for shadowing
allprojects {
    afterEvaluate{
        if ( project.plugins.findPlugin(PreparedShadow) ) {
            develEnv {
                dependsOn PreparedShadow.JAR_TASK
                dependsOn PreparedShadow.SOURCE_JAR_TASK
            }
        }
    }
}
